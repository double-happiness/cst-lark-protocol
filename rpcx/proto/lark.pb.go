// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lark.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	client "github.com/smallnest/rpcx/client"
	protocol "github.com/smallnest/rpcx/protocol"
	server "github.com/smallnest/rpcx/server"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NextSeqReq struct {
	BizTag               string   `protobuf:"bytes,1,opt,name=bizTag,proto3" json:"bizTag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NextSeqReq) Reset()         { *m = NextSeqReq{} }
func (m *NextSeqReq) String() string { return proto.CompactTextString(m) }
func (*NextSeqReq) ProtoMessage()    {}
func (*NextSeqReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_98def3179c80e35e, []int{0}
}

func (m *NextSeqReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextSeqReq.Unmarshal(m, b)
}
func (m *NextSeqReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextSeqReq.Marshal(b, m, deterministic)
}
func (m *NextSeqReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextSeqReq.Merge(m, src)
}
func (m *NextSeqReq) XXX_Size() int {
	return xxx_messageInfo_NextSeqReq.Size(m)
}
func (m *NextSeqReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NextSeqReq.DiscardUnknown(m)
}

var xxx_messageInfo_NextSeqReq proto.InternalMessageInfo

func (m *NextSeqReq) GetBizTag() string {
	if m != nil {
		return m.BizTag
	}
	return ""
}

type NextSeqResp struct {
	BizTag               string   `protobuf:"bytes,1,opt,name=bizTag,proto3" json:"bizTag,omitempty"`
	SeqId                int64    `protobuf:"varint,2,opt,name=seqId,proto3" json:"seqId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NextSeqResp) Reset()         { *m = NextSeqResp{} }
func (m *NextSeqResp) String() string { return proto.CompactTextString(m) }
func (*NextSeqResp) ProtoMessage()    {}
func (*NextSeqResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_98def3179c80e35e, []int{1}
}

func (m *NextSeqResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextSeqResp.Unmarshal(m, b)
}
func (m *NextSeqResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextSeqResp.Marshal(b, m, deterministic)
}
func (m *NextSeqResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextSeqResp.Merge(m, src)
}
func (m *NextSeqResp) XXX_Size() int {
	return xxx_messageInfo_NextSeqResp.Size(m)
}
func (m *NextSeqResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NextSeqResp.DiscardUnknown(m)
}

var xxx_messageInfo_NextSeqResp proto.InternalMessageInfo

func (m *NextSeqResp) GetBizTag() string {
	if m != nil {
		return m.BizTag
	}
	return ""
}

func (m *NextSeqResp) GetSeqId() int64 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

type SegmentReq struct {
	BizTag               string   `protobuf:"bytes,1,opt,name=bizTag,proto3" json:"bizTag,omitempty"`
	Count                int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentReq) Reset()         { *m = SegmentReq{} }
func (m *SegmentReq) String() string { return proto.CompactTextString(m) }
func (*SegmentReq) ProtoMessage()    {}
func (*SegmentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_98def3179c80e35e, []int{2}
}

func (m *SegmentReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentReq.Unmarshal(m, b)
}
func (m *SegmentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentReq.Marshal(b, m, deterministic)
}
func (m *SegmentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentReq.Merge(m, src)
}
func (m *SegmentReq) XXX_Size() int {
	return xxx_messageInfo_SegmentReq.Size(m)
}
func (m *SegmentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentReq.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentReq proto.InternalMessageInfo

func (m *SegmentReq) GetBizTag() string {
	if m != nil {
		return m.BizTag
	}
	return ""
}

func (m *SegmentReq) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SegmentResp struct {
	BizTag               string   `protobuf:"bytes,1,opt,name=bizTag,proto3" json:"bizTag,omitempty"`
	Start                int64    `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End                  int64    `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentResp) Reset()         { *m = SegmentResp{} }
func (m *SegmentResp) String() string { return proto.CompactTextString(m) }
func (*SegmentResp) ProtoMessage()    {}
func (*SegmentResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_98def3179c80e35e, []int{3}
}

func (m *SegmentResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentResp.Unmarshal(m, b)
}
func (m *SegmentResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentResp.Marshal(b, m, deterministic)
}
func (m *SegmentResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentResp.Merge(m, src)
}
func (m *SegmentResp) XXX_Size() int {
	return xxx_messageInfo_SegmentResp.Size(m)
}
func (m *SegmentResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentResp.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentResp proto.InternalMessageInfo

func (m *SegmentResp) GetBizTag() string {
	if m != nil {
		return m.BizTag
	}
	return ""
}

func (m *SegmentResp) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *SegmentResp) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type SyncRouteTableReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRouteTableReq) Reset()         { *m = SyncRouteTableReq{} }
func (m *SyncRouteTableReq) String() string { return proto.CompactTextString(m) }
func (*SyncRouteTableReq) ProtoMessage()    {}
func (*SyncRouteTableReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_98def3179c80e35e, []int{4}
}

func (m *SyncRouteTableReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncRouteTableReq.Unmarshal(m, b)
}
func (m *SyncRouteTableReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncRouteTableReq.Marshal(b, m, deterministic)
}
func (m *SyncRouteTableReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRouteTableReq.Merge(m, src)
}
func (m *SyncRouteTableReq) XXX_Size() int {
	return xxx_messageInfo_SyncRouteTableReq.Size(m)
}
func (m *SyncRouteTableReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRouteTableReq.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRouteTableReq proto.InternalMessageInfo

type SyncRouteTableResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRouteTableResp) Reset()         { *m = SyncRouteTableResp{} }
func (m *SyncRouteTableResp) String() string { return proto.CompactTextString(m) }
func (*SyncRouteTableResp) ProtoMessage()    {}
func (*SyncRouteTableResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_98def3179c80e35e, []int{5}
}

func (m *SyncRouteTableResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncRouteTableResp.Unmarshal(m, b)
}
func (m *SyncRouteTableResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncRouteTableResp.Marshal(b, m, deterministic)
}
func (m *SyncRouteTableResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRouteTableResp.Merge(m, src)
}
func (m *SyncRouteTableResp) XXX_Size() int {
	return xxx_messageInfo_SyncRouteTableResp.Size(m)
}
func (m *SyncRouteTableResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRouteTableResp.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRouteTableResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*NextSeqReq)(nil), "NextSeqReq")
	proto.RegisterType((*NextSeqResp)(nil), "NextSeqResp")
	proto.RegisterType((*SegmentReq)(nil), "SegmentReq")
	proto.RegisterType((*SegmentResp)(nil), "SegmentResp")
	proto.RegisterType((*SyncRouteTableReq)(nil), "syncRouteTableReq")
	proto.RegisterType((*SyncRouteTableResp)(nil), "syncRouteTableResp")
}

func init() {
	proto.RegisterFile("lark.proto", fileDescriptor_98def3179c80e35e)
}

var fileDescriptor_98def3179c80e35e = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0x49, 0x2c, 0xca,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe1, 0xe2, 0xf2, 0x4b, 0xad, 0x28, 0x09, 0x4e,
	0x2d, 0x0c, 0x4a, 0x2d, 0x14, 0x12, 0xe3, 0x62, 0x4b, 0xca, 0xac, 0x0a, 0x49, 0x4c, 0x97, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2, 0x94, 0xac, 0xb9, 0xb8, 0xe1, 0xaa, 0x8a, 0x0b, 0x70,
	0x29, 0x13, 0x12, 0xe1, 0x62, 0x2d, 0x4e, 0x2d, 0xf4, 0x4c, 0x91, 0x60, 0x52, 0x60, 0xd4, 0x60,
	0x0e, 0x82, 0x70, 0x94, 0xac, 0xb8, 0xb8, 0x82, 0x53, 0xd3, 0x73, 0x53, 0xf3, 0x4a, 0xf0, 0x58,
	0x01, 0xd2, 0x9b, 0x9c, 0x5f, 0x9a, 0x57, 0x02, 0xd6, 0xcb, 0x1a, 0x04, 0xe1, 0x28, 0xf9, 0x72,
	0x71, 0xc3, 0xf5, 0x12, 0xb0, 0xb8, 0x24, 0xb1, 0xa8, 0x04, 0x6e, 0x31, 0x88, 0x23, 0x24, 0xc0,
	0xc5, 0x9c, 0x9a, 0x97, 0x22, 0xc1, 0x0c, 0x16, 0x03, 0x31, 0x95, 0x84, 0xb9, 0x04, 0x8b, 0x2b,
	0xf3, 0x92, 0x83, 0xf2, 0x4b, 0x4b, 0x52, 0x43, 0x12, 0x93, 0x72, 0x52, 0x83, 0x52, 0x0b, 0x95,
	0x44, 0xb8, 0x84, 0xd0, 0x05, 0x8b, 0x0b, 0x8c, 0x7a, 0x19, 0xb9, 0x58, 0x7c, 0x12, 0x8b, 0xb2,
	0x85, 0x2c, 0xb9, 0xf8, 0x82, 0x51, 0xa4, 0x85, 0x84, 0xf4, 0x30, 0x0c, 0x91, 0x12, 0xd6, 0xc3,
	0x34, 0x43, 0x48, 0x85, 0x8b, 0x1d, 0x1a, 0x6c, 0x42, 0xdc, 0x7a, 0x88, 0x60, 0x96, 0xe2, 0xd1,
	0x43, 0x0e, 0x4d, 0x15, 0x2e, 0x76, 0xa8, 0x1f, 0x85, 0xb8, 0xf5, 0x10, 0x21, 0x25, 0xc5, 0xa3,
	0x87, 0xe4, 0x75, 0x27, 0xa6, 0x28, 0x86, 0x24, 0x36, 0x70, 0x9c, 0x19, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x35, 0xdc, 0x89, 0x7e, 0xc1, 0x01, 0x00, 0x00,
}

// This following code was generated by rpcx
// Gernerated from lark.proto

//================== interface skeleton ===================
type LarkAble interface {
	// LarkAble can be used for interface verification.

	// SyncRouteTable is server rpc method as defined
	SyncRouteTable(ctx context.Context, args *SyncRouteTableReq, reply *SyncRouteTableResp) (err error)

	// NextSeq is server rpc method as defined
	NextSeq(ctx context.Context, args *NextSeqReq, reply *NextSeqResp) (err error)

	// Segment is server rpc method as defined
	Segment(ctx context.Context, args *SegmentReq, reply *SegmentResp) (err error)
}

//================== server skeleton ===================
type LarkImpl struct{}

// ServeForLark starts a server only registers one service.
// You can register more services and only start one server.
// It blocks until the application exits.
func ServeForLark(addr string) error {
	s := server.NewServer()
	s.RegisterName("Lark", new(LarkImpl), "")
	return s.Serve("tcp", addr)
}

// SyncRouteTable is server rpc method as defined
func (s *LarkImpl) SyncRouteTable(ctx context.Context, args *SyncRouteTableReq, reply *SyncRouteTableResp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = SyncRouteTableResp{}

	return nil
}

// NextSeq is server rpc method as defined
func (s *LarkImpl) NextSeq(ctx context.Context, args *NextSeqReq, reply *NextSeqResp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = NextSeqResp{}

	return nil
}

// Segment is server rpc method as defined
func (s *LarkImpl) Segment(ctx context.Context, args *SegmentReq, reply *SegmentResp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = SegmentResp{}

	return nil
}

//================== client stub ===================
// Lark is a client wrapped XClient.
type LarkClient struct {
	xclient client.XClient
}

// NewLarkClient wraps a XClient as LarkClient.
// You can pass a shared XClient object created by NewXClientForLark.
func NewLarkClient(xclient client.XClient) *LarkClient {
	return &LarkClient{xclient: xclient}
}

// NewXClientForLark creates a XClient.
// You can configure this client with more options such as etcd registry, serialize type, select algorithm and fail mode.
func NewXClientForLark(addr string) (client.XClient, error) {
	d, err := client.NewPeer2PeerDiscovery("tcp@"+addr, "")
	if err != nil {
		return nil, err
	}

	opt := client.DefaultOption
	opt.SerializeType = protocol.ProtoBuffer

	xclient := client.NewXClient("Lark", client.Failtry, client.RoundRobin, d, opt)

	return xclient, nil
}

// SyncRouteTable is client rpc method as defined
func (c *LarkClient) SyncRouteTable(ctx context.Context, args *SyncRouteTableReq) (reply *SyncRouteTableResp, err error) {
	reply = &SyncRouteTableResp{}
	err = c.xclient.Call(ctx, "SyncRouteTable", args, reply)
	return reply, err
}

// NextSeq is client rpc method as defined
func (c *LarkClient) NextSeq(ctx context.Context, args *NextSeqReq) (reply *NextSeqResp, err error) {
	reply = &NextSeqResp{}
	err = c.xclient.Call(ctx, "NextSeq", args, reply)
	return reply, err
}

// Segment is client rpc method as defined
func (c *LarkClient) Segment(ctx context.Context, args *SegmentReq) (reply *SegmentResp, err error) {
	reply = &SegmentResp{}
	err = c.xclient.Call(ctx, "Segment", args, reply)
	return reply, err
}

//================== oneclient stub ===================
// LarkOneClient is a client wrapped oneClient.
type LarkOneClient struct {
	serviceName string
	oneclient   client.OneClient
}

// NewLarkOneClient wraps a OneClient as LarkOneClient.
// You can pass a shared OneClient object created by NewOneClientForLark.
func NewLarkOneClient(oneclient client.OneClient) *LarkOneClient {
	return &LarkOneClient{
		serviceName: "Lark",
		oneclient:   oneclient,
	}
}

// ======================================================

// SyncRouteTable is client rpc method as defined
func (c *LarkOneClient) SyncRouteTable(ctx context.Context, args *SyncRouteTableReq) (reply *SyncRouteTableResp, err error) {
	reply = &SyncRouteTableResp{}
	err = c.oneclient.Call(ctx, c.serviceName, "SyncRouteTable", args, reply)
	return reply, err
}

// NextSeq is client rpc method as defined
func (c *LarkOneClient) NextSeq(ctx context.Context, args *NextSeqReq) (reply *NextSeqResp, err error) {
	reply = &NextSeqResp{}
	err = c.oneclient.Call(ctx, c.serviceName, "NextSeq", args, reply)
	return reply, err
}

// Segment is client rpc method as defined
func (c *LarkOneClient) Segment(ctx context.Context, args *SegmentReq) (reply *SegmentResp, err error) {
	reply = &SegmentResp{}
	err = c.oneclient.Call(ctx, c.serviceName, "Segment", args, reply)
	return reply, err
}
